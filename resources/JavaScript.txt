JavaScript

	Versions
		* ECMAScript (European Computer Manufacturers Association Script)
		* ES1(1997), ES2(1998), ES3(1999), ES4(Never Released)
		* ES5(2009), ES6(2015), ES7(2016), ES8(2017), ES8(2017), ES9(2018), ES10(2019), ES11(2020), ES12(2021), ES13(2022), ES14(2023)
		* The latest version is ES15(2024).

	Execute JavaScript file via Visual Studio
		1. Install node in the system and assign gloabl home path under system variables.
		2. Go to Terminal
		3. Make sure in terminal the file is path displayed.
		4. Enter the command 'node <filename>.js'.
		5. Click enter to execute the file.
	
	* As JavaScript execution is Asynchronous. It is not mandatory that execution will happen step by step, in case if any step takes longer time to execute javascript will proceed to execute next step.

	Functions
		console.log() - Prints in Console
		* If you try to print an user defined function which has no return type, it prints 'undefined'

	Variable Keywords
		var - We can Re-Declare and Re-Assign the variable. (ES5 Version)
		let - Introduced in ES6 Engine version. We can only Re-Assign value the variable.
		const - Introduced in ES6 Engine version. We cannot Re-Declare or Re-Assign variable.

		* It is not mandatory to provide keyword for a variable. By default 'var' is considered.
		* JavaScript will implicity assign the datatype for variable when initiated.
		* typeof(variable) method gives the data type of variable.

		Variables Access Scope:
			var - Global/Functional level
				* If var is initialized outside function it is accessible globally. Can be accessed inside if statement/loops etc.
				* If var is initialized inside function it is accessible only inside that function.
			let - Global/Block level
				* If let is initialized inside block '{}' it is accessible only inside that block.
				* If let is initialized outside any block it is accessible globally.
			const - Global/Block level
				* If const is initialized inside block '{}' it is accessible only inside that block.
				* If const is initialized outside any block it is accessible globally.

	DataTypes
		* Javascript has intelligence to pick the desired datatype during run time. Below are some commonly used,
			Number, String, Boolean, Null, Undefined

	Arrays
		* Initialize an Arrays
			Example: var SampleArray = new Array(1,2,3,"String")
		* Index starts with '0'.
		* length gives length of the array.
		* Array[Index] provides value at the index.
		* push(Element) method adds element at the last index.
		* pop() method removes the last index element.
		* unshift(Element) method adds element at the first index.
		* indexOf(Element) method gives the element index on first occurence. If not present returns '-1'.
		* lastIndexOf(Element) method gives the element index on last occurence. If not present returns '-1'.
		* reverse() method reverses the array. This will change the original array.
		* includes(Element) method provide information if element is present in the array or not. Return true or false.
		* slice(x, y) method slices the array from x index to (y-1) index. This will not change the original array.
		* sort() method sorts the array. Will change the original array.
			Number Array in Ascending order
			String Array in Alphabetical order (Upper to Lower case)
			Number, String and Boolean Array (Number to Alphabetical order, boolean values are also considered as String)

		Array Functions:
			1. reduce()
			2. filter()
			3. map()

	String
		* length gives the length of the string.
		* split(character/string) method splits based on character.
		* slice(x, y) method slices the string from x index to (y-1) index. This will not change the original array.
		* parseInt(String) method converts String to Number.
		* toString() converts to String.
		* concat() method adds string, this doesn't change the original string.
			During contact boolean value (true/false) or null are also considered as String.
				Example: console.log('hello'+true+null)  -> hellotruenull
		* indexOf(Element) method gives the element index on first occurence. If not present returns '-1'.
		* indexOf(Element, x) method will search from xth index of string and gives the element index on first occurence. If not present returns '-1'.
		* lastIndexOf(Element) method gives the element index on last occurence. If not present returns '-1'.

	Object
		* It is a collection of Properties.
		* Properties in object are defined in key-value pairs. 
		* Key is always String, Value can be any datatype. Value can also be a function.
		* Key can be initialized multiple times in single object. Property with latest value will be saved.
		* Delete property from Object
			delete Object.PropertyName
		* Check if property is in Object. 'in' returns true or false
			'PropertyName' in Object
		* Get all values in an Object. Using for loop it will iterate through all the properties in object.
			for (let key in Object){
				console.log(Object[key])
			}
	
	Class (ES6 Engine)
		* It is combination of Properties, Methods, Cnstructors

		Property:
			Instance
				The value depends on during object creation.
			Class
				Value is already defined inside class and remains same for all objects.

		Constructor
			Default (Non-Parameterized): 
				Javascript creates default constructor if not created by user.				
				There can be user defined non-parameterized constructors.
			Parameterized: 
				These are user defined constructors with parameters.
				If user creates a Parameterized constructor, javascript will not create a default constructor.
				While creating the object if no parameters are passed in Parameterized constructors, default parameter values are passed as 'undefined'.

			* In javascript the constructor should be named as 'constructor'.
			* There should not be more than one constructor for a class in javascript.

		Inheritance
			* ChildClass can access all entities (properties/functions) from parent class.
			* ChildClass should have same constructor same as ParentClass.
			* ParentClass constructor should be called at first line of ChildClass constructor as super().

	Object vs Class
		values are restricted to one object.					| we can reuse the entities(properties/methods) multiple times every object creation.
		assigning values will change the original entity data	| assigning values will not change the original entity behaviour.

	Export/Import Class
		Exporting class to other files. The below syntax should be written before the class.
			syntax: 'module.exports='
		Importing class, the syntax should be at the top of the file.
			syntax: 'const ClassName = require('./<filename>')'

		* Import and Export syntax are mandatory.
		* Don't  create any class objects in an export class. Because all the objects created also gets exported. This will create confusion in import file.